% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/valid.R
\name{valid2}
\alias{valid2}
\title{Alternative generic validation function}
\usage{
valid2(
  ...,
  .choices = character(),
  .reverse = FALSE,
  .flip = FALSE,
  .strict = TRUE,
  .unname = FALSE
)
}
\arguments{
\item{...}{(\link{character}) Selection of available values}

\item{.choices}{(\link{character}) Available values}

\item{.reverse}{(\link{logical}) Reverse order yes/no}

\item{.flip}{(\link{logical}) Flip names and values yes/no}

\item{.strict}{(\link{logical}) Be strict about "things that might go wrong" yes/no}

\item{.unname}{(\link{logical}) Drop names yes/no}
}
\value{

}
\description{
Designed to be called \emph{inside} a custom\verb{valid_*} function (e.g. \code{\link[=valid_yes_no]{valid_yes_no()}})
}
\examples{
valid_foo <- function(
  ...
) {
  choices <- letters[1:3]

  names(choices) <- choices \%>\% toupper()

  valid::valid2(
    ...,
    .choices = choices
  )
}
valid_foo()
# Via name
valid_foo("A")
valid_foo("A", "C")
# Via value
valid_foo("a")
valid_foo("a", "c")
# Handling obvious errors
try(valid_foo("D"))
try(valid_foo("d"))
# Handling partial errors
try(valid_foo("A", "D"))
try(valid_foo("A", "D", .strict = FALSE))
try(valid_foo("a", "d"))
try(valid_foo("a", "d", .strict = FALSE))
}
